/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&sk { release-after-ms = <2000>; };

&sl { release-after-ms = <2000>; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        kp_sk: kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        sl_kp: sl_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_KP";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        hm_hl: hm_hl {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_HL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
        };
    };

    macros {
        nick_mc_linedel: nick_mc_linedel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp BSPC>;
            label = "NICK_MC_LINEDEL";
        };

        nick_mc_linecopy: nick_mc_linecopy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp LC(C)>;
            label = "NICK_MC_LINECOPY";
        };

        nick_mc_hwpnarrow: nick_mc_hwpnarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(N)) &kp LA(LS(J))>;
            label = "NICK_MC_HWPNARROW";
        };

        nick_mc_hwpwiden: nick_mc_hwpwiden {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(K)) &kp LA(LS(W))>;
            label = "NICK_MC_HWPWIDEN";
        };

        nick_mc_linesel: nick_mc_linesel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LC(LS(HOME))>;
            label = "NICK_MC_LINESEL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC          &hm EXCLAMATION N1      &hm AT_SIGN N2           &hm HASH N3  &hm DOLLAR N4  &hm PERCENT N5      &mo 2                                                                                     &mo 3                  &hm CARET N6  &hm AMPERSAND N7  &hm ASTERISK N8  &hm LEFT_PARENTHESIS N9      &hm RIGHT_PARENTHESIS N0       &hm UNDERSCORE MINUS
&hm LS(TAB) TAB  &kp Q                   &hm LC(W) W              &kp E        &kp R          &hm LG(UP_ARROW) T  &hm TILDE GRAVE                                                                           &hm LA(LC(TAB)) K_APP  &kp Y         &kp U             &kp I            &kp O                        &kp P                          &hm PLUS EQUAL
&kp LSHIFT       &kp A                   &kp S                    &kp D        &lt 4 F        &hm LG(DOWN) G      &hm INS DEL      &hm LC(LS(HOME)) HOME  &hm LC(LS(END)) END      &kp LEFT      &kp RIGHT  &kp LGUI               &kp H         &lt 4 J           &hm RALT K       &lt 6 L                      &hm COLON SEMICOLON            &hm DOUBLE_QUOTES APOSTROPHE
&kp LSHIFT       &hm LC(Z) Z             &hm LC(X) X              &hm LC(C) C  &hm LC(V) V    &hm LG(V) B                                                 &kp PG_UP                &kp UP_ARROW                                    &kp N         &kp M             &kp COMMA        &kp DOT                      &hm QUESTION SLASH             &kp BACKSLASH
&mo 5            &hm LA(LEFT) LC(PG_UP)  &hm LA(RIGHT) LC(PG_DN)  &kp LCTRL    &kp LALT                           &kp BSPC         &kp SPACE              &kp PAGE_DOWN            &kp DOWN      &kp ENTER  &kp SPACE                            &kp LSHIFT        &kp LALT         &hm LEFT_BRACE LEFT_BRACKET  &hm RIGHT_BRACE RIGHT_BRACKET  &hm CAPS RCTRL
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL   &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB     &kp Q      &kp W     &kp E     &kp R      &kp T   &trans                                                   &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp LSHIFT  &kp A      &kp S     &kp D     &kp F      &kp G   &trans    &kp LCTRL  &kp LALT      &kp LGUI   &trans     &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp ESC     &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2       &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &trans     &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &kp K_CONTEXT_MENU
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp SCROLLLOCK                                            &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                               &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none           &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                                &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none           &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_mymacros {
            bindings = <
&trans           &kp F1            &kp F2             &kp F3             &kp F4             &kp F5         &trans                                      &trans  &kp F6  &kp F7     &kp F8  &kp F9             &kp F10  &trans
&kp LC(LA(TAB))  &kp LC(LS(LEFT))  &kp LC(LS(RIGHT))  &kp LG(LC(LEFT))   &kp LG(LC(RIGHT))  &kp LG(LS(T))  &trans                                      &trans  &trans  &trans     &trans  &trans             &trans   &trans
&trans           &nick_mc_linesel  &kp LG(LS(S))      &nick_mc_linedel   &trans             &trans         &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans     &trans  &nick_mc_linecopy  &trans   &trans
&trans           &trans            &trans             &kp LC(LS(LG(T)))  &kp LC(LA(LG(V)))  &trans                         &trans      &trans                  &trans  &trans     &trans  &trans             &trans   &trans
&trans           &trans            &trans             &trans             &trans                            &trans  &trans  &trans      &trans  &trans  &trans          &kp LCTRL  &trans  &trans             &trans   &trans
            >;
        };

        Fancyzones {
            bindings = <
&trans  &kp F1  &kp F2    &kp F3     &kp F4    &kp F5  &trans                                      &trans  &kp F6  &kp F7                    &kp F8                    &kp F9                    &kp F10  &trans
&trans  &trans  &trans    &trans     &trans    &trans  &trans                                      &trans  &trans  &trans                    &kp LC(LG(LA(N5)))        &trans                    &trans   &trans
&trans  &trans  &trans    &trans     &trans    &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LG(LC(LA(NUMBER_1)))  &kp LG(LA(LC(NUMBER_2)))  &kp LG(LA(LC(NUMBER_3)))  &trans   &trans
&trans  &trans  &trans    &trans     &trans    &trans                  &trans      &trans                  &trans  &trans                    &kp LC(LG(LA(NUMBER_4)))  &trans                    &trans   &trans
&trans  &trans  &kp LGUI  &kp LCTRL  &kp LALT          &trans  &trans  &trans      &trans  &trans  &trans          &kp LCTRL                 &kp LALT                  &kp LGUI                  &trans   &trans
            >;
        };

        HWP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans              &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans              &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LA(LS(R))       &kp LS(LA(E))      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &nick_mc_hwpnarrow  &nick_mc_hwpwiden  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans              &trans             &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
